buildscript {
    repositories {
        maven { url = 'https://files.minecraftforge.net/maven' }
        maven { url = 'https://repo.spongepowered.org/maven/' }

        jcenter()
        mavenCentral()
    }

    dependencies {
        classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '5.1+', changing: true
        classpath group: 'org.spongepowered',         name: 'mixingradle', version: '0.7-SNAPSHOT'
    }
}

apply plugin: 'net.minecraftforge.gradle'
apply plugin: 'eclipse'
apply plugin: 'org.spongepowered.mixin'

// This initializes the config. Please try to modify the variables in the config file, if needed, add more if you see a reason to.
ext.config = parseConfig(file('build.properties'))

version = config.VERSION
group = "${config.GROUP}.${config.ARTIFACT}"
archivesBaseName = "${config.ARCHIVES_BASE_NAME}-${config.MINECRAFT_VERSION}"

java.toolchain.languageVersion = JavaLanguageVersion.of(17)

minecraft {
    mappings channel: config.MAPPINGS_CHANNEL, version: config.MAPPINGS_VERSION

    accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')

    runs {
        client {
            workingDirectory project.file('run')
            arg '-mixin.config=food-effects.mixins.json'
            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'
            property 'forge.logging.console.level', 'debug'
            mods {
                foodeffects {
                    source sourceSets.main
                }
            }
        }

        server {
            workingDirectory project.file('run')
            arg '-mixin.config=food-effects.mixins.json'
            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'
            property 'forge.logging.console.level', 'debug'
            mods {
                foodeffects {
                    source sourceSets.main
                }
            }
        }

        data {
            workingDirectory project.file('run')
            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'
            property 'forge.logging.console.level', 'debug'
            args '--mod', 'foodeffects', '--all', '--output', file('src/generated/resources/'), '--existing', file('src/main/resources/')
            mods {
                foodeffects {
                    source sourceSets.main
                }
            }
        }

        all {
            lazyToken('minecraft_classpath') {
                configurations.packIntoJar.copyRecursive().resolve().collect { it.absolutePath }.join(File.pathSeparator)
            }
        }
    }
}

mixin {
    add sourceSets.main, "food-effects.refmap.json"
    config "food-effects.mixins.json"

    debug.verbose = true
    debug.export = true
    dumpTargetOnFailure = true
}

configurations {
    packIntoJar {
        extendsFrom runtimeOnly
        transitive = false
    }
}

repositories {
    maven { url = 'https://maven.infernalstudios.org/releases' }
}

dependencies {
    minecraft "net.minecraftforge:forge:${config.MINECRAFT_VERSION}-${config.FORGE_VERSION}"
    annotationProcessor 'org.spongepowered:mixin:0.8.5:processor'
    implementation "org.infernalstudios:config:${config.CONFIG_LIB_VERSION}"
    packIntoJar "org.infernalstudios:config:${config.CONFIG_LIB_VERSION}"
}

jar {
    from {
        configurations.packIntoJar.collect { it.isDirectory() ? it : zipTree(it) }
    }

    manifest {
        attributes([
                'Specification-Title'   : config.TITLE,
                'Specification-Vendor'  : config.AUTHOR,
                'Specification-Version' : '1',
                'Implementation-Title'  : config.TITLE,
                'Implementation-Version': config.VERSION,
                'Implementation-Vendor' : config.AUTHOR,
                'MixinConfigs'          : 'food-effects.mixins.json'
        ])
    }
}

jar.finalizedBy('reobfJar')

task sourcesJar(type: Jar) {
    archiveClassifier.set('sources')
    from sourceSets.main.allJava
}

tasks.build.dependsOn sourcesJar

// Config parse function
def parseConfig(File config) {
    config.withReader {
        def prop = new Properties()
        prop.load(it)
        return (new ConfigSlurper().parse(prop))
    }
}

if (System.getProperty("idea.sync.active") == "true") {
    afterEvaluate {
        tasks.withType(JavaCompile).all {
            it.options.annotationProcessorPath = files()
        }
    }
}
